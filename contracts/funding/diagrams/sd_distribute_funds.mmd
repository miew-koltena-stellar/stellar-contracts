sequenceDiagram
    participant Admin as Admin/Governance
    participant FC as FundingContract
    participant FRC as FractionalizationContract
    participant Storage as Contract Storage
    participant XLM as XLM Token Contract (SAC)

    Note over Admin, Events: Prerequisites: Asset created, funds deposited, admin auth

    Admin->>+FC: distribute_funds(caller, asset_id, amount, description)
    
    Note over FC: Step 1: Authorization
    FC->>FC: require_admin_auth(caller)
    alt Not Admin
        FC-->>Admin: panic!("Only admin can perform this action")
    end

    Note over FC: Step 2: Basic Validations
    FC->>FC: Check amount > 0
    alt Amount is 0
        FC-->>Admin: panic!("Distribution amount must be > 0")
    end

    Note over FC: Step 3: Cross-Contract Asset Validation
    FC->>+FRC: asset_exists(asset_id)
    FRC->>Storage: Check AssetSupply(asset_id)
    FRC-->>-FC: bool (asset exists)
    alt Asset doesn't exist
        FC-->>Admin: panic!("Asset does not exist")
    end

    Note over FC: Step 4: Fund Availability Check
    FC->>Storage: Get AssetFunds(asset_id)
    Storage-->>FC: current_funds
    FC->>FC: Check amount <= current_funds
    alt Insufficient funds
        FC-->>Admin: panic!("Insufficient funds for distribution")
    end

    Note over FC: Step 5: Asset Supply Validation
    FC->>+FRC: asset_supply(asset_id)
    FRC->>Storage: Get AssetSupply(asset_id)
    FRC-->>-FC: total_supply
    FC->>FC: Check total_supply > 0
    alt No supply
        FC-->>Admin: panic!("Asset has no supply")
    end

    Note over FC: Step 6: Get Asset Owners
    FC->>+FRC: asset_owners(asset_id)
    FRC->>Storage: Get AssetOwnersList(asset_id)
    FRC-->>-FC: Vec<Address> owners
    FC->>FC: Check owners.len() > 0
    alt No owners
        FC-->>Admin: panic!("No asset owners found")
    end

    Note over FC: Step 7: Execute Distribution Logic
    FC->>+FC: execute_distribution_logic(env, fnft_client, asset_id, amount, total_supply, owners, description)
    
    Note over FC: Step 7a: Update Asset Funds
    FC->>Storage: Update AssetFunds(asset_id) -= amount
    FC->>Storage: Update TotalDistributed(asset_id) += amount
    FC->>Storage: Increment DistributionCount(asset_id)

    Note over FC: Step 7b: Execute XLM Distributions
    
    loop For each owner in owners
        FC->>+FRC: balance_of(owner, asset_id)
        FRC->>Storage: Get Balance(owner, asset_id)
        FRC-->>-FC: owner_balance
        
        alt owner_balance > 0
            FC->>FC: Calculate owner_share = (amount * owner_balance) / total_supply
            alt owner_share > 0
                Note over FC: XLM Transfer
                FC->>+XLM: transfer(contract_address, owner, owner_share)
                XLM->>Storage: Update contract's XLM balance -= owner_share
                XLM->>Storage: Update owner's XLM balance += owner_share
                XLM->>Events: Emit XLM transfer event
                XLM-->>-FC: Transfer successful
                
                FC->>FC: total_distributed += owner_share
                FC->>FC: recipients_count++
                FC->>Events: Emit "received" event (asset_id, owner, owner_share)
            end
        end
    end

    Note over FC: Step 7c: Handle Dust (Integer Division Remainder)
    FC->>FC: Check if total_distributed < amount
    alt Dust exists
        FC->>FC: dust = amount - total_distributed
        FC->>Storage: Add dust back to AssetFunds(asset_id)
        FC->>Storage: Subtract dust from TotalDistributed(asset_id)
    end

    Note over FC: Step 7d: Emit Final Distribution Event
    FC->>Events: Emit "distrib" event (asset_id, total_distributed, description, recipients_count)
    
    FC-->>-FC: Distribution complete
    FC-->>-Admin: Success

    Note over Admin, Events: Result: Funds distributed proportionally to all token holders